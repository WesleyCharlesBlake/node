version: 2.1
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: poetapp/node
    docker:
      - image: circleci/buildpack-deps:stretch
      
  coverage-builder:
    environment:
      IMAGE_NAME: poetapp/node
      DOCKERIZE_VERSION: v0.3.0
    docker:
      - image: circleci/buildpack-deps:stretch
    # The secondary container is an instance of the second listed image which is run in a common network where ports exposed on the primary container are available on localhost.
      - image: mongo:3.7
        environment:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: adminPass
      - image: rabbitmq:3
        environment:
          RABBITMQ_ERLANG_COOKIE: some_secret_cookie
          RABBITMQ_DEFAULT_USER: admin
          RABBITMQ_DEFAULT_PASS: adminPass
      - image: ipfs/go-ipfs:v0.4.18
      - image: ruimarinho/bitcoin-core:0.17.0
        command: [
          "-printtoconsole",
          "-server",
          "-testnet=${USE_BTC_TESTNET:-0}",
          "-regtest=${USE_BTC_REGTEST:-1}",
          "-rpcuser=bitcoinrpcuser",
          "-rpcpassword=bitcoinrpcpassword",
          "-rpcallowip=::/0",
          "-deprecatedrpc=signrawtransaction"
        ]

jobs:
  build:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            docker build -t $IMAGE_NAME:latest .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar

  lint:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Run lint in container
          command: |
            docker run -ti $IMAGE_NAME:latest npm run lint

  coverage:
    executor: coverage-builder
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz            
      - run:
          name: Wait for rabbitmq
          command: dockerize -wait tcp://localhost:5672 -timeout 1m
      - run:
          name: Run $IMAGE_NAME
          command: |
            docker run -d -p 18080:18080 \
              -e POET_SERVICE=node \
              -e BITCOIN_URL=bitcoind-1 \
              -e BITCOIN_URL_B=bitcoind-2 \
              -e RABBITMQ_URL=amqp://admin:adminPass@rabbit \
              -e MONGODB_HOST=mongo \
              -e MONGODB_USER=admin \
              -e MONGODB_PASSWORD=adminPass \
              -e MONGODB_DATABASE=poet \
              -e IPFS_URL=http://ipfs:5001 \
              -e IPFS_ARCHIVE_URL_PREFIX=http://ipfs:8080/ipfs \
              -e INTEGRATION_TEST_NODE_URL=http://poet-node:18080 \
              --name=poet-node \
              $IMAGE_NAME:latest


  # publish:
  #   executor: docker-publisher
  #   steps:
  #     - attach_workspace:
  #         at: /tmp/workspace
  #     - setup_remote_docker
  #     - run:
  #         name: Load archived Docker image
  #         command: docker load -i /tmp/workspace/image.tar
  #     - run:
  #         name: Publish Docker Image to Docker Hub
  #         command: |
  #           echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
  #           docker push $IMAGE_NAME:latest

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - lint:
          requires:
            - build
          filters:
            branches:
              only: master
      - coverage:
          requires:
            - build
          filters:
            branches:
              only: master