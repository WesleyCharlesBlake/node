version: 2.1
executors:
  base-node:
    environment:
      IMAGE_NAME: poetapp/node
    docker:
      - image: poetapp/base:10.14.2-alpine 
      
  coverage-builder:
    environment:
      IMAGE_NAME: poetapp/node
      DOCKERIZE_VERSION: v0.3.0

    docker:
      - image: poetapp/base:10.14.2-alpine

      # this containers make up the node dep services, which run in the primary container      
      - name: mongo
        image: poetapp/mongo-ci:4.0.6

      - name: rabbit
        image: rabbitmq:3
        environment:
          RABBITMQ_ERLANG_COOKIE: some_secret_cookie
          RABBITMQ_DEFAULT_USER: admin
          RABBITMQ_DEFAULT_PASS: adminPass
        
      - name: ipfs
        image: ipfs/go-ipfs:v0.4.18

      - image: ruimarinho/bitcoin-core:0.17.0
        command: [
          "-printtoconsole",
          "-server",
          "-regtest=1",
          "-port=18444",
          "-rpcuser=bitcoinrpcuser",
          "-rpcpassword=bitcoinrpcpassword",
          "-rpcport=18443",
          "-rpcallowip=::/0",
          "-deprecatedrpc=signrawtransaction"
        ]

jobs:
  build:
    executor: base-node
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install deps
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules

  lint:
    executor: base-node
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Run lint in container
          command: npm run lint

  coverage:
    environment:
      MONGODB_USER: "poet"
      MONGODB_PASSWORD: "poetPass"
      MONGODB_DATABASE: "poet"
      MONGODB_HOST: mongo
      RABBITMQ_URL: amqp://admin:adminPass@rabbit
      IPFS_URL: http://ipfs:5001
      IPFS_ARCHIVE_URL_PREFIX: http://ipfs:8080/ipfs
      INTEGRATION_TEST_NODE_URL: http:/localhost:18080
      BITCOIN_URL: localhost
      BITCOIN_URL_B: localhost
      BITCOIN_PORT: "18443"
      LOGGING_LEVEL: trace
    executor: coverage-builder
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: check ports on host
          command: netstat -ltnp
      - run:
          name: Build dist
          command: npm run build
      - run:
          name: Install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz            
      - run:
          name: Wait for rabbitmq
          command: dockerize -wait tcp://rabbit:5672 -timeout 1m
      - run:
          name: start node
          command: npm run start
          background: true
          environment:
            POET_SERVICE: node
      - run:
          name: Wait for node
          command: dockerize -wait http://localhost:18080/health -timeout 1m
      - run:
          name: Mine blocks
          command: |
            apk add curl
            curl --user rpcuser:rpcpassword -k http://127.0.0.1:18443 --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "generate", "params": ["101"] }' -H 'content-type: text/plain;'
      - run:
          name: Check health
          command: |
            sleep 5
            curl http://localhost:18080/health
            sleep 5
            curl http://localhost:18080/health
            sleep 5
            curl http://localhost:18080/health
            sleep 5
            curl http://localhost:18080/health
      - run:
          name: Run coverage in container
          command: npm run coverage
      - store_test_results:
          path: .coverage/
      - store_artifacts:
          path: /root/.npm/

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - lint:
          requires:
            - build
          filters:
            branches:
              only: master
      - coverage:
          requires:
            - build
          filters:
            branches:
              only: master
