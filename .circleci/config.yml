version: 2.1
executors:
  base-node:
    environment:
      IMAGE_NAME: poetapp/node
    docker:
      - image: poetapp/base:10.14.2-alpine 
      
  coverage-builder:
    environment:
      IMAGE_NAME: poetapp/node
      DOCKERIZE_VERSION: v0.3.0
      MONGODB_USER: admin
      MONGODB_PASSWORD: admin
      MONGODB_DATABASE: poet

    docker:
      - image: poetapp/base:10.14.2-alpine
    # The secondary container is an instance of the second listed image which is run in a common network where ports exposed on the primary container are available on localhost.
      - image: mongo:3.7
        command: [--smallfiles]
      - image: rabbitmq:3
        environment:
          RABBITMQ_ERLANG_COOKIE: some_secret_cookie
          RABBITMQ_DEFAULT_USER: admin
          RABBITMQ_DEFAULT_PASS: adminPass
      - image: ipfs/go-ipfs:v0.4.18
      - image: ruimarinho/bitcoin-core:0.17.0
        command: [
          "-printtoconsole",
          "-server",
          "-testnet=${USE_BTC_TESTNET:-0}",
          "-regtest=${USE_BTC_REGTEST:-1}",
          "-rpcuser=bitcoinrpcuser",
          "-rpcpassword=bitcoinrpcpassword",
          "-rpcallowip=::/0",
          "-deprecatedrpc=signrawtransaction"
        ]

jobs:
  build:
    executor: base-node
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install deps
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules

  lint:
    executor: base-node
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install
          command: npm install
      - run:
          name: Run lint in container
          command: npm run lint

  coverage:
    executor: coverage-builder
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Build dist
          command: npm run build
      - run:
          name: Install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz            
      - run:
          name: Wait for rabbitmq
          command: dockerize -wait tcp://localhost:5672 -timeout 1m
      - run:
          name: start node
          command: npm start
      - run:
          name: Wait for rabbitmq
          command: dockerize -wait tcp://localhost:18080 -timeout 1m
      - run:
          name: Run coverage in container
          command: npm run coverage


workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - lint:
          requires:
            - build
          filters:
            branches:
              only: master
      - coverage:
          requires:
            - build
          filters:
            branches:
              only: master